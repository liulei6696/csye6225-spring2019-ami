Parameters:
  refStackName:
    Type: String
  amiId:
    Type: String

Resources:
# Security Group for Web Servers
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${refStackName}-VPCID"
      GroupDescription: Enable HTTP access svia user defined port
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-csye6225-websg

# EC2 Instance
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub "${amiId}"
      InstanceType: t2.micro
      DisableApiTermination: false
      SecurityGroupIds:
        - !GetAtt WebSecurityGroup.GroupId
      SubnetId:
        Fn::ImportValue: !Sub "${refStackName}-SUBNETAID"
      BlockDeviceMappings: 
        - DeviceName: /dev/sdm
          Ebs: 
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 20
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-csye6225-ec2inst

# DynamoDB Table
  MyDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      -
        AttributeName: "id"
        AttributeType: "S"
      KeySchema:
      - 
        AttributeName: "id"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-csye6225-dyndb

# RDS Instance
  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: csye6225
      Engine: MySQL
      DBInstanceClass: db.t2.medium
      MultiAZ: false
      DBInstanceIdentifier: csye6225-spring2019
      MasterUsername: csye6225master
      MasterUserPassword: csye6225password
      DBSubnetGroupName: !Ref myDBSubnetGroup
      PubliclyAccessible: true
      AllocatedStorage: 5
      VPCSecurityGroups:
      - !GetAtt DBEC2SecurityGroup.GroupId
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-csye6225-dyndb

# subnet group for RDS instance
  myDBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: "subnet group for RDS instance"
      SubnetIds: 
        - Fn::ImportValue: !Sub "${refStackName}-SUBNETAID"
        - Fn::ImportValue: !Sub "${refStackName}-SUBNETBID"
        - Fn::ImportValue: !Sub "${refStackName}-SUBNETCID"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-csye6225-rdssubg

# EC2 security group for RDS instance
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      VpcId: 
        Fn::ImportValue:
          !Sub "${refStackName}-VPCID"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        # SourceSecurityGroupName: !Ref WebSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-csye6225-rdssg

# AMI Policies
  circleci-ec2-ami:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: "circleci-ec2-ami"
      Users:
        - Ref: "circleci"
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
        Action:
        - ec2:AttachVolume
        - ec2:AuthorizeSecurityGroupIngress
        - ec2:CopyImage
        - ec2:CreateImage
        - ec2:CreateKeypair
        - ec2:CreateSecurityGroup
        - ec2:CreateSnapshot
        - ec2:CreateTags
        - ec2:CreateVolume
        - ec2:DeleteKeyPair
        - ec2:DeleteSecurityGroup
        - ec2:DeleteSnapshot
        - ec2:DeleteVolume
        - ec2:DeregisterImage
        - ec2:DescribeImageAttribute
        - ec2:DescribeImages
        - ec2:DescribeInstances
        - ec2:DescribeInstanceStatus
        - ec2:DescribeRegions
        - ec2:DescribeSecurityGroups
        - ec2:DescribeSnapshots
        - ec2:DescribeSubnets
        - ec2:DescribeTags
        - ec2:DescribeVolumes
        - ec2:DetachVolume
        - ec2:GetPasswordData
        - ec2:ModifyImageAttribute
        - ec2:ModifyInstanceAttribute
        - ec2:ModifySnapshotAttribute
        - ec2:RegisterImage
        - ec2:RunInstances
        - ec2:StopInstances
        - ec2:TerminateInstances
        Resource: "*"

  CodeDeploy-EC2-S3:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: "CodeDeploy-EC2-S3"
      Roles: 
        - !Ref: "CodeDeployEC2ServiceRole"
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Action:
          - s3:Get*
          - s3:List*
          Effect: Allow
          Resource: "*"

  CircleCI-Upload-To-S3:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: "CircleCI-Upload-To-S3" 
      Users:
        -  "circleci"
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - "*"

  CirlceCI-Code-Deploy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: "CirlceCI-Code-Deploy"
      Users:
        - Ref: "circleci"
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - codedeploy:RegisterApplicationRevision
          - codedeploy:GetApplicationRevision
          Resource:
          - arn:aws:codedeploy:AWS_REGION:AWS_ACCOUNT_ID:application:CODE_DEPLOY_APPLICATION_NAME
        - Effect: Allow
          Action:
          - "codedeploy:CreateDeployment",
          - "codedeploy:GetDeployment"
          Resource:
          - "*"
        - Effect: Allow
          Action:
          - codedeploy:GetDeploymentConfig
          Resource:
          - !Join
            - ":"
            - - "arn:aws:codedeploy"
            - !Ref AWS::Region
            - !Ref AWS::AccountId 
            - "deploymentconfig:CodeDeployDefault.OneAtATime"
          - !Join 
            - ":"
            - - "arn:aws:codedeploy"
            - !Ref AWS::Region
            - !Ref AWS::AccountId
            - "deploymentconfig:CodeDeployDefault.HalfAtATime"
          - !Join 
            - ":"
            - - "arn:aws:codedeploy"
            - !Ref AWS::Region
            - !Ref AWS::AccountId
            - "deploymentconfig:CodeDeployDefault.AllAtOnce"


# create roles
  CodeDeployEC2ServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
         Version: "2012-10-17"
         Statement: 
           - 
             Effect: "Allow"
             Principal: 
               Service: 
                 - "ec2.amazonaws.com"
             Action: 
               - "sts:AssumeRole"
      RoleName: "CodeDeployEC2ServiceRole"
      
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
         Statement: 
           - 
             Effect: "Allow"
             Principal: 
               Service: 
                 - "ec2.amazonaws.com"
             Action: 
               - "sts:AssumeRole"
      RoleName: "CodeDeployServiceRole"

 